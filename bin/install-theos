#!/usr/bin/env bash

set -e

# Pretty print
special() {
    printf "\e[0;34m==> \e[1;34mTheos Installer:\e[m %s\n" "$1"
}

update() {
    printf "\n\e[0;36m==> \e[1;36m%s\e[m\n" "$1"
}

common() {
    printf "\n\e[0;37m==> \e[1;37m%s\e[m\n" "$1"
}

error() {
    printf "\e[0;31m==> \e[1;31m%s\e[m\n" "$1"
}


# Root is no bueno
if [[ $EUID -eq 0 ]]; then
    error "Theos should NOT be installed with or run as root (su/sudo)!"
    error "  - Please re-run the installer as a non-root user."
    exit 1
fi


# Common vars
PLATFORM=$(uname)
CSHELL="${SHELL##*/}"
SHELL_ENV="unknown"
if [[ "${CSHELL,,}" == "bash" ]]; then
    SHELL_ENV="$HOME/.profile"
elif [[ "${CSHELL,,}" == "zsh" ]]; then
    SHELL_ENV="$HOME/.zshenv"
fi
# TODO: CI support (non-interactive)
NONINTERACTIVE=0
if [[ -z $CI ]]; then
    NONINTERACTIVE=1
fi


# The work
darwin() {
    common "Platform: Darwin"

    # Check for Xcode
    XCODE=$(xcode-select -p)
    if ! [[ "${XCODE}" == "/Applications/Xcode.app/Contents/Developer" ]]; then
        error "Xcode is mandatory. The Command Line Tools package isn't sufficient for Theos to work. Xcode provides toolchains for all Apple platforms."
        exit 3
    fi

    # Check for Homebrew
    update "Preparing to install dependencies..."
    if ! command -v brew &> /dev/null; then
        read -p "Homebrew, which provides tools Theos depends on, is not installed. Would you like to have it installed for you? [y/n]" hbrew
        if [[ "${hbrew,,}" == "y" || "${hbrew,,}" == "yes" ]]; then
            bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" && update "Homebrew has been successfully installed!" || (error "Homebrew install command seems to have encountered an error. Please see the log above." && exit 5)
        else
            error "Homebrew provides tools Theos depends on and thus is mandatory. Please install Homebrew before proceeding with the installation."
            exit 4
        fi
    fi

    # Dependencies
    brew install ldid xz && update "Dependencies have been successfully installed!" || (error "Dependency install command seems to have encountered an error. Please see the log above." && exit 6)

    # Check for $THEOS env var
    update "Checking for \$THEOS environment variable..."
    if [[ "$THEOS" ]]; then
        update "\$THEOS is already set to '$THEOS'. Nothing to do here."
    else
        update "\$THEOS has not been set. Setting now..."

        if [[ "${CSHELL,,}" == "unknown" ]]; then
            error "Current shell ($CSHELL) is unsupported by this installer. Please set the THEOS environment variable to '~/theos' manually before proceeding."
            exit 7
        fi

        # Set $THEOS
        echo "export THEOS=~/theos" >> "$SHELL_ENV"
        source "$SHELL_ENV"
        if [[ "$THEOS" ]]; then
            update "\$THEOS has been successfully set to '$THEOS'!"
        else
            error "\$THEOS is still not set despite our efforts. Try restarting your shell and/or running the installer again. If that doesn't do the trick, you may have to set the THEOS environment variable to '~/theos' manually before proceeding."
            exit 8
        fi
    fi

    # Get Theos
    update "Checking for Theos install..."
    if [[ -d "$THEOS" && "$(ls -A "$THEOS")" ]]; then
        update "Theos appears to already be installed. Checking for updates..."
        $THEOS/bin/update-theos
    else
        update "Theos does not appear to be installed. Cloning now..."
        git clone --recursive https://github.com/theos/theos.git $THEOS && update "Git clone of Theos was successful!" || (error "Theos git clone command seems to have encountered an error. Please see the log above." && exit 9)
    fi

    # Get patched sdks
    update "Checking for patched sdks..."
    if [[ -d "$THEOS/sdks/" && "$(ls -A "$THEOS/sdks/" | grep sdk)" ]]; then
        update "SDKs appear to already be installed."
    else
        update "SDKS do not appear to be installed. Installing now..."
        curl -LO https://github.com/theos/sdks/archive/master.zip
        TMP=$(mktemp -d)
        unzip master.zip -d $TMP
        mv $TMP/sdks-master/*.sdk $THEOS/sdks
        rm -r master.zip $TMP

        if [[ -d "$THEOS/sdks/" && "$(ls -A "$THEOS/sdks/" | grep sdk)" ]]; then
            update "SDKs successfully installed!"
        else
            error "Something appears to have gone wrong. Please try again."
            exit 10
        fi
    fi
}

darwin-mobile() {
    common "Platform: Darwin (Mobile)"

    # Check for sudo (not installed by default on some jbs)
    if ! command -v sudo &> /dev/null; then
        error "Please install 'sudo' in your package manager before proceeding with the installation."
        exit 3
    fi

    # Determine iOS version
    OLD=0
    KERNEL_VER=$(sysctl kern.osrelease | sed 's/[^0-9]*//g')
    if [[ $KERNEL_VER < 1800 ]]; then
        OLD=1
    fi

    # Dependencies
    update "Preparing to install dependencies. Please enter your password if prompted:"
    if [[ $OLD == 1 ]]; then
        read -p "Do you have 'https://coolstar.org/publicrepo/', 'https://repo.bingner.com/', and 'http://apt.thebigboss.org/repofiles/cydia/' installed in the sources of your jailbreak's primary package manager? [y/n]" ready
        if [[ "${ready,,}" == "y" || "${ready,,}" == "yes" ]]; then
            sudo apt install org.theos.dependencies -y && update "Dependencies have been successfully installed!" || (error "Dependency install command seems to have encountered an error. Please see the log above." && exit 5)
        else
            error "Please install the repos mentioned above before proceeding."
            exit 4
        fi
    else
        # Dependencies pkg is outdated, so need to cater install for Procursus vs Elucubratus
        if [[ -f "/.procursus_strapped" ]]; then
            read -p "Do you have 'https://apt.procursus.us' installed in the sources of your jailbreak's primary package manager? [y/n]" ready
            if [[ "${ready,,}" == "y" || "${ready,,}" == "yes" ]]; then
                sudo apt install ca-certificates clang coreutils curl dpkg git grep ldid make odcctools perl plutil rsync unzip xz-utils -y && update "Dependencies have been successfully installed!" || (error "Dependency install command seems to have encountered an error. Please see the log above." && exit 5)
            else
                error "Please install the repo mentioned above before proceeding."
                exit 4
            fi
        else
            read -p "Do you have 'https://apt.bingner.com' installed in the sources of your jailbreak's primary package manager? [y/n]" ready
            if [[ "${ready,,}" == "y" || "${ready,,}" == "yes" ]]; then
                sudo apt install ca-certificates clang coreutils curl dpkg git grep ldid make odcctools perl com.bingner.plutil rsync unzip xz -y && update "Dependencies have been successfully installed!" || (error "Dependency install command seems to have encountered an error. Please see the log above." && exit 5)
            else
                error "Please install the repo mentioned above before proceeding."
                exit 4
            fi
        fi
    fi

    # Check desire for Swift support
    update "Checking desire for Swift support..."
    read -p "Would you like to be able to work with Swift? If so, an additional package will need to be installed. [y/n]" confirm
    if [[ "${confirm,,}" == "y" || "${confirm,,}" == "yes" ]]; then
        if [[ -f "/.procursus_strapped" ]]; then
            sudo apt install swift -y && update "Additional Swift package installation successful!" || (error "Additional Swift package install command seems to have encountered an error. Please see the log above." && exit 4)
        else
            sudo apt install swift-toolchain -y && update "Additional Swift package installation successful!" || (error "Additional Swift package install command seems to have encountered an error. Please see the log above." && exit 4)
        fi
    else
        update "Skipping Swift support."
        common "Note: if you end up wanting to use Swift in the future, just install the 'swift' (Procursus ONLY) or 'swift-toolchain' (all other bootstraps) packages from within your package manager."
    fi

    # Check for $THEOS env var
    update "Checking for \$THEOS environment variable..."
    if [[ "$THEOS" ]]; then
        update "\$THEOS is already set to '$THEOS'. Nothing to do here."
    else
        update "\$THEOS has not been set. Setting now..."

        if [[ "${CSHELL,,}" == "unknown" ]]; then
            error "Current shell ($CSHELL) is unsupported by this installer. Please set the THEOS environment variable to '~/theos' manually before proceeding."
            exit 6
        fi

        # Set $THEOS
        if [[ -f /var/checkra1n.dmg || -d /binpack ]]; then
            # checkra1n has no exec in var, so need to set
            #  up '/opt' for use with Theos as mobile user
            echo "export THEOS=/opt/theos" >> "$SHELL_ENV"
            if [[ -d "/opt" ]]; then
                update "'/opt' already exists. Checking its ownership..."
                # Check that '/opt' isn't owned by root
                STATUS="$(stat -c '%U' /opt)"
                if [[ "${status,,}" == "root" ]]; then
                    update "Owner of '/opt' is root. Attempting to switch owner to mobile..."
                    sudo chown mobile /opt && update "Owner of '/opt' successfully transfered to mobile from root!" || (error "Failed to transfer ownership of '/opt' to mobile from root. Please see the log above." && exit 7)
                fi
            else
                update "Creating a special directory to house Theos..."
                sudo install -d -o mobile -g mobile /opt && update "Special directory for Theos created successfully!" || (error "Special directory create command seems to have encountered an error. Please see the log above." && exit 7)
            fi
        else
            echo "export THEOS=~/theos" >> "$SHELL_ENV"
        fi
        source "$SHELL_ENV"
        if [[ "$THEOS" ]]; then
            update "\$THEOS has been successfully set to '$THEOS'!"
        else
            error "\$THEOS is still not set despite our efforts. Try restarting your shell and/or running the installer again. If that doesn't do the trick, you may have to set the THEOS environment variable to '~/theos' manually before proceeding."
            exit 8
        fi
    fi

    # Get Theos
    update "Checking for Theos install..."
    if [[ -d "$THEOS" && "$(ls -A "$THEOS")" ]]; then
        update "Theos appears to already be installed. Checking for updates..."
        $THEOS/bin/update-theos
    else
        update "Theos does not appear to be installed. Cloning now..."
        git clone --recursive https://github.com/theos/theos.git $THEOS && update "Git clone of Theos was successful!" || (error "Theos git clone command seems to have encountered an error. Please see the log above." && exit 9)
    fi

    # Get patched sdks
    update "Checking for patched sdks..."
    if [[ -d "$THEOS/sdks/" && "$(ls -A "$THEOS/sdks/" | grep sdk)" ]]; then
        update "SDKs appear to already be installed."
    else
        update "SDKS do not appear to be installed. Installing now..."
        curl -LO https://github.com/theos/sdks/archive/master.zip
        TMP=$(mktemp -d)
        unzip master.zip -d $TMP
        mv $TMP/sdks-master/*.sdk $THEOS/sdks
        rm -r master.zip $TMP

        if [[ -d "$THEOS/sdks/" && "$(ls -A "$THEOS/sdks/" | grep sdk)" ]]; then
            update "SDKs successfully installed!"
        else
            error "Something appears to have gone wrong. Please try again."
            exit 10
        fi
    fi
}

linux() {
    common "Platform: Linux"

    DISTRO="$(cat /etc/*release | grep "^ID=" | sed -e "s/^ID=//")"

    # Dependencies
    update "Preparing to install dependencies. Please enter your password if prompted:"
    if [[ "${DISTRO,,}" == "debian" ]]; then
        sudo apt install build-essential fakeroot libtinfo5 libz3-dev rsync curl perl unzip git -y && update "Dependencies have been successfully installed!" || (error "Dependency install command seems to have encountered an error. Please see the log above." && exit 3)
    elif [[ "${DISTRO,,}" == "arch" ]]; then
        sudo pacman -S --noconfirm base-devel fakeroot openssl rsync curl perl unzip git -y && update "Dependencies have been successfully installed!" || (error "Dependency install command seems to have encountered an error. Please see the log above." && exit 3)
        # libtinfo5 equivalent (get from AUR)
        git clone https://aur.archlinux.org/ncurses5-compat-libs.git
        cd ncurses5-compat-libs
        gpg --recv-keys "$(cat PKGBUILD | grep validpgp | grep -oP "(?<=').*(?=')")"
        makepkg -sir --noconfirm
    fi

    # Check for WSL
    update "Checking for WSL..."
    if [[ "$(uname -r | sed -n 's/.*\( *Microsoft *\).*/\1/ip')" == "microsoft" ]]; then
        VERSION=$(uname -r | sed 's/.*\([[:digit:]]\)[[:space:]]*/\1/')
        if [[ $VERSION == 1 ]]; then
            update "WSL1! Need to fix fakeroot..."
            sudo update-alternatives --set fakeroot /usr/bin/fakeroot-tcp && update "fakeroot fixed!" || (error "fakeroot fix seems to have encountered an error. Please see the log above." && exit 4)
        else
            update "WSL2! Nothing to do here."
        fi
    else
        update "Seems you're not using WSL. Moving on..."
    fi

    # Check for $THEOS env var
    update "Checking for \$THEOS environment variable..."
    if [[ "$THEOS" ]]; then
        update "\$THEOS is already set to '$THEOS'. Nothing to do here."
    else
        update "\$THEOS has not been set. Setting now..."

        if [[ "${CSHELL,,}" == "unknown" ]]; then
            error "Current shell ($CSHELL) is unsupported by this installer. Please set the THEOS environment variable to '~/theos' manually before proceeding."
            exit 5
        fi

        # Set $THEOS and prioritize $THEOS/toolchain
        echo "export THEOS=~/theos" >> "$SHELL_ENV"
        echo 'export PATH=$THEOS/toolchain/linux/iphone/bin:$PATH' >> "$SHELL_ENV"
        echo 'export LD_LIBRARY_PATH=$THEOS/toolchain/linux/iphone/lib:$LD_LIBRARY_PATH' >> "$SHELL_ENV"
        source "$SHELL_ENV"
        if [[ "$THEOS" ]]; then
            update "\$THEOS has been successfully set to '$THEOS'!"
        else
            error "\$THEOS is still not set despite our efforts. Try restarting your shell and/or running the installer again. If that doesn't do the trick, you may have to set the THEOS environment variable to '~/theos' manually before proceeding."
            exit 6
        fi
    fi

    # Get Theos
    update "Checking for Theos install..."
    if [[ -d "$THEOS" && "$(ls -A "$THEOS")" ]]; then
        update "Theos appears to already be installed. Checking for updates..."
        $THEOS/bin/update-theos
    else
        update "Theos does not appear to be installed. Cloning now..."
        git clone --recursive https://github.com/theos/theos.git $THEOS && update "Git clone of Theos was successful!" || (error "Theos git clone command seems to have encountered an error. Please see the log above." && exit 7)
    fi

    # Get a toolchain
    update "Checking for iOS toolchain..."
    if [[ -d "$THEOS/toolchain/linux/iphone/" && "$(ls -A "$THEOS/toolchain/linux/iphone")" ]]; then
        update "A toolchain appears to already be installed."
    else
        while true; do
            update "A toolchain does not appear to be installed."
            read -p "Would you like your toolchain to support Swift (larger toolchain size) or not (smaller toolchain size)? [y/n]" stoolchain
            if [[ "${stoolchain,,}" == "y" || "${stoolchain,,}" == "yes" ]]; then
                read -p "You chose to install the Swift-compatible toolchain. Is this correct? [y/n]" confirm
                if [[ "${confirm,,}" == "y" || "${confirm,,}" == "yes" ]]; then
                    sudo apt install zstd -y
                    curl -LO https://github.com/CRKatri/llvm-project/releases/download/swift-5.3.2-RELEASE/swift-5.3.2-RELEASE-ubuntu20.04.tar.zst
                    TMP=$(mktemp -d)
                    tar -xvf swift-5.3.2-RELEASE-ubuntu20.04.tar.zst -C $TMP
                    mkdir -p $THEOS/toolchain/linux/iphone $THEOS/toolchain/swift
                    mv $TMP/swift-5.3.2-RELEASE-ubuntu20.04/* $THEOS/toolchain/linux/iphone/
                    ln -s $THEOS/toolchain/linux/iphone $THEOS/toolchain/swift
                    rm -r swift-5.3.2-RELEASE-ubuntu20.04.tar.zst $TMP

                    # Confirm that toolchain is usable
                    if command -v otool &> /dev/null; then
                        update "Successfully installed the Swift-compatible toolchain!"
                    else
                        error "Something appears to have gone wrong -- the toolchain is not accessible. Please try again."
                        exit 8
                    fi
                    break
                fi
            elif [[ "${stoolchain,,}" == "n" || "${stoolchain,,}" == "no" ]]; then
                read -p "You chose to install the non-Swift-compatible toolchain. Is this correct? [y/n]" confirm
                if [[ "${confirm,,}" == "y" || "${confirm,,}" == "yes" ]]; then
                    curl -LO https://github.com/sbingner/llvm-project/releases/latest/download/linux-ios-arm64e-clang-toolchain.tar.lzma
                    TMP=$(mktemp -d)
                    tar -xvf linux-ios-arm64e-clang-toolchain.tar.lzma -C $TMP
                    mkdir -p $THEOS/toolchain/linux/iphone
                    mv $TMP/ios-arm64e-clang-toolchain/* $THEOS/toolchain/linux/iphone/
                    rm -r linux-ios-arm64e-clang-toolchain.tar.lzma $TMP

                    # Confirm that toolchain is usable
                    if command -v otool &> /dev/null; then
                        update "Successfully installed the non-Swift-compatible toolchain!"
                    else
                        error "Something appears to have gone wrong -- the toolchain is not accessible. Please try again."
                        exit 8
                    fi
                    break
                fi
            else
                common "Please pick your desired toolchain to continue."
            fi
        done
    fi

    # Get patched sdks
    update "Checking for patched sdks..."
    if [[ -d "$THEOS/sdks/" && "$(ls -A "$THEOS/sdks/" | grep sdk)" ]]; then
        update "SDKs appear to already be installed."
    else
        update "SDKS do not appear to be installed. Installing now..."
        curl -LO https://github.com/theos/sdks/archive/master.zip
        TMP=$(mktemp -d)
        unzip master.zip -d $TMP
        mv $TMP/sdks-master/*.sdk $THEOS/sdks
        rm -r master.zip $TMP

        if [[ -d "$THEOS/sdks/" && "$(ls -A "$THEOS/sdks/" | grep sdk)" ]]; then
            update "SDKs successfully installed!"
        else
            error "Something appears to have gone wrong. Please try again."
            exit 9
        fi
    fi
}


# Determine platform and start work
if [[ "${PLATFORM,,}" == "darwin" ]]; then
    special "Starting install..."
    if [[ "$(uname -m)" =~ "iP" ]]; then
        darwin-mobile
    else
        darwin
    fi
    special "Theos has been successfully installed! Restart your shell and then run \$THEOS/bin/nic.pl to get started."
elif [[ "${PLATFORM,,}" == "linux" ]]; then
    special "starting install..."
    linux
    special "Theos has been successfully installed! Restart your shell and then run \$THEOS/bin/nic.pl to get started."
else
    error "'$PLATFORM' is currently unsupported by this installer and/or Theos."
    exit 2
fi
